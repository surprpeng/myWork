C++
1、在类的内部定义成员函数的函数体，这种函数会自动为内联函数，
   这种函数在函数调用的地方在编译阶段都会进行代码替换。
2、C++编译器自动为类产生四个缺省函数：默认构造函数、默认析构函数、默认赋值函数
										默认拷贝构造函数。
3、拷贝构造函数
	A a； A b(a); A b = a; 
	用已有的类的对象构造一个新的对象，这里的a是存在的，b是不存在的。
	定义： A(const A& other): mem_data(other.mem_data){}
	什么时候被调用：
		1）当用一个对象去初始化一个新的对象时
		2）如果函数的形参是类的对象，调用函数进行形参和实参结合时
		3）如果函数的返回值是类的对象，函数调用完成返回时
	浅拷贝：如果复制对象中引用了一个外部内容（例如分配在堆上的数据），那么在复制这个对象的时
		    候，新旧两个对象指向同一块内容。
	深拷贝：拷贝的时候为新对象制作了外部对象的独立复制。默认的拷贝构造函数是浅拷贝。
4、拷贝赋值函数
	A a; A b; b = a; 
	这里a b 对象已经存在，用a对象来赋值给b。
	定义： string& operator=(const string& other){}
	如果类对象里有内存分配，需要先释放掉原来的内存，再进行内存内容的复制。
5、必须要使用列表初始化的几种情况
	1）类成员为const
		A() member_a(aaa),member_b(bbb){};  //这里的成员变量为const，不能用 = 进行初始化
	2）类成员为引用类型
		同理，成员变量为引用&时，也只能在列表进行初始化。引用在功能上和常量指针是一样的。
	3）类成员，没有默认构造参数类型
	class B{}; //该类没有默认构造参数
	class A{
		A(v): b(v){};
		B b;
	};
	4）如果类存在继承关系，派生类必须在其初始化列表中调用基类的构造函数。
6、静态成员函数在任何类的实例别创建之前调用它们，这使得它们可以用来执行复杂的初始化任务。
	静态成员函数中不能直接用非静态成员变量，因为它没有隐式的this指针。
7、可以通过友元，继承，和公有成员函数访问类的非公有成员。
	友元提供了不同类之间进行数据共享的机制。friend
	1）因为友元函数没有this指针，所以访问非静态成员时，需要对象做参数。
	2）友元关系不能被继承。
8、流运算符不能通过类的成员函数重载，因为通过类的成员函数重载的运算符第一个参数必须是自己，
	而流运算符的重载要求第一个参数是流对象。所以一般用友元来解决。
9、 ======== 公有继承 ============
	基类  |  public	| protected | private
	派生类|	 public | protected | 不可访问
	========protected==============
	基类  |  public	   | protected | private
	派生类|	 protected | protected | 不可访问	
	========private ==============
	基类  |  public	   | protected | private
	派生类|	 private   | private   | 不可访问	
10、 重载：编译阶段就找到具体调用的方法，静态绑定，参数列表不同。
	 多态，只有等到调用方法的那一刻，编译器才能确定所要调用的具体方法，动态绑定。用虚函数表实现虚函数。
11、构造函数可以被重载，但析构函数不行！！！
12、delete与 delete []区别：
	1)用new申请的对象，用delete；用new[]申请的对象用delete[]。
	2) 因为需要对对象数组中的每一个对象调用析构函数。
13、基类的析构函数应该被定义为虚函数，这样当基类指针操作派生类时，内存才会被释放完全。
14、当虚函数表现多态性时不能内联，因为多态性是在运行期间确定，而内联是在编译期间确定。
15、extern "C" 用于告诉C++这段代码是C函数。这是因为C++编译后库中函数名会变得很长，与C生成的不一致，造成C++
	不能直接调用C函数，加上extern “C”后，C++就能直接调用C函数了。
16、为了阻止编译器自动产生默认函数，如：默认复制构造函数和赋值操作符。
	1）可将对应的成员函数声明为private并且不予实现。
	2）使用base class
		class uncopyable{
			protected:                  //允许派生类构造和析构
				uncopyable(){};
				~uncopyable(){};
			private：
				uncopyable(const uncopyable);               //阻止copy
				uncopyable& opertor=(const uncoptable&);
		};
		class H : private uncopyable{
			...
		};
		当调用H 的复制操作时，就会尝试调用base class 的对应兄弟，那些调用会被编译器拒绝，因为其为base class的private。
17、必须为纯虚函数提供一份定义。
18、析构函数决不能突出异常。如果被析构函数调用的函数可能突出异常，析构函数应该捕捉任何异常，然后吞下它们或结束程序。
	如果客户需要对一个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数（而不是析构函数）执行该操作。
19、在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class.
20、另赋值操作符返回一个reference to *this。
21、1）auto_ptr智能指针是一个类指针对象，其析构函数自动对其所指向对象调用delete。
	若通过拷贝构造或赋值运算符复制他们，他们会变成null，而复制所得的指针将取得资源的唯一拥有权。
    2）shared_ptr指针就是引用计数型智慧指针，持续追踪共有多少对象指向某笔资源，并在无人指向它时自动删除该资源。
	3）以独立语句将new对象存储于智能指针内。如果不这样做，一旦异常被抛出，有可能导致难以察觉的资源泄漏。
	4）unique_ptr 独占所指向的对象
22、lambda表达式，匿名函数对象，c++11新特性。
	[函数对象参数] (操作符重载函数参数) mutable 或 exception 声明 -> 返回值类型 {函数体}
	1）[函数对象参数]
		空: 没有任何参数
		= ：可使用所有局部变量，并以值的方式传递。
		& ：可使用所有局部变量，并以引用的方式传递。
		this : 可使用lambda所在类中的成员变量。
		a ：将a按值进行传递。但是不能修改a的值，要想修改必须加上mutable。
		&a：将a按引用传递
	2）	mutable 可以修改传递进来的拷贝。
23、考虑写给个swap函数，首先在class里写一个member 函数，然后再在class所属的命名空间写一个non-member函数调用member函数，
	最后在non-member函数里加上，using std::函数名。
24、decltype关键字：我们希望从表达式的类型推断出要定义的变量类型，但是不想用该表达式的值定义变量。
	decltype与auto的区别：
		1）auto忽略顶层const，decltype保留顶层const；
		2）对引用和解引用操作，auto推断出原有类型，decltype推断出引用。
		3）auto推断时会实际执行，decltype不会执行，只做分析。
25、删除string中左边和右边的空格：
	inline std::string ltrim(const std::string &str) 
    {
        std::string s(str);
        s.erase(s.begin(), std::find_if_not<decltype(s.begin()), int(int)>(s.begin(), s.end(),
                std::isspace));
        return s;
    }
    // trim from end (construct new string) 删除字符串末尾的空格。
    inline std::string rtrim(const std::string &str)
    {
        std::string s(str);
		//必须需要加上<>的原因是 std::isspace有多个重载函数，如果不加<>，编译器无法知道std::isspace调用的是哪一个函数
        s.erase(std::find_if_not<decltype(s.rbegin()), int(int)>(s.rbegin(), s.rend(),
                std::isspace).base(), s.end());
        return s;
    }
	string a;
	a = rtrim(ltrim(a));
	
	//reverse_iterator:: https://en.cppreference.com/w/cpp/iterator/reverse_iterator/base
	

	
26、static_cast 强制类型转换：
	1）static_cast可以用来消除重载函数的二义性：
	例：        
	s.erase(std::find_if_not<decltype(s.rbegin()), int(int)>(s.rbegin(), s.rend(),
                std::isspace).base(), s.end());
	--由于std::isspace有多个函数重载。所以find_if_not必须要用<>来说明调用的是哪一个函数。
	s.erase(std::find_if_not(s.rbegin(), s.rend(),
                static_cast<int(*)(int)>(std::isspace)).base(), s.end());
	-- 可以通过static_cast<int(*)(int)>说明调用的是哪一个重载函数，消除函数的二义性。
	2）用来初始化
	std::vector<int> v = static_cast<std::vector<int>>(10);
    std::cout << "v.size() = " << v.size() << '\n'; // output 10
	3)static downcast
		D d;
		B& br = d; // upcast via implicit conversion
		br.hello();  // this is a B
		D& another_d = static_cast<D&>(br); // downcast
		another_d.hello(); //this is a D;
	4) 可以将lvalue to xvalue
		std::vector<int> v2 = static_cast<std::vector<int>&&>(v);
		std::cout << "after move, v.size() = " << v.size() << '\n';	// 0
	5) discarded-value expression
       static_cast<void>(v2.size());
	   
************************************
	dynamic_cast RTTI（运行时类型检测），安全
	reinterpret_cast 顾名思义 重新解释 强行转换指针，非常强大
26.1 
	1） 右值引用可以增加临时变量的生命周期（左值引用也可以）
		std::string&& r3 = s1 + s1;      // okay: rvalue reference extends lifetime
		r3 += "Test";                    // okay: can modify through reference to non-const
	2） 右值引用，可以去除不必要的copy，move后之前的变量就不能再使用了
		A a2 = std::move(a1); // move-constructs from xvalue ，a1 is not used.

27、typename的意义：
	1）在template声明式中，typename和class的意义相同。
	2）为了知道class::iterator是一个类型而不是一个变量，需要加上typename。
		typename class::iterator x;
28、C++对象模式：
	1）简单对象模型：每一个solt指向一个member。降低了C++编译器的设计复杂度，而损失了空间和执行
		期的效率。
	2）表格驱动模型：一个object内有两个solt，一个指向member date table,一个指向member function table。
		虽然编译器内没有用到这种模型，但却给了virtual function提供了一个有效地方案。
	3）C++对象模型：在简单对象模型技术上派生而来，并对空间和存取时间做了优化。
		nostatic data置于class object内, static data和function members(static and nostatic)分别置于
		不同的class object中，每个class object中有一个vtr_point指向vtr table。
29、如果class没有定义default constructor，编译器不一定会合成出一个：
	1）当class内“调用member object或base class 的default constructor或为一个object初始化其virtual function
		机制或virtual base class机制”，编译器会合成一个implicit nontrivial default constructors。
		编译器不会合成implicit trivial default constructors
30、istringstream、ostringstream、stringstream;用于执行C风格的串流输入操作
	例： #include<iostream>  
		#include<sstream>        //istringstream 必须包含这个头文件
		#include<string>  
		using namespace std;  
		int main()  
		{                                                                                                                                                                                                                           
			string str="i am a boy";  
			istringstream is(str);  
			string s;  
			while(is>>s)  
			{  
				cout<<s<<endl;  
			}  
		}
	输出是：	i
				am
				a
				boy
31、c++11新特性
	1）头文件不带.h : 例：#include <vector>
	2)variadic Templates:(接受任意参数，且类型可以不一样)
		- 例1：
			void print(){}  //需要一个作为终止条件。
			template<typename T,typename... Types>
			void print(const T& firstArg, const Type&... args)
			{
				cout<<firstArg<<endl;
				print(arg...);          //call print() for remaining argments, 递归(recursive)
			}
			注：sizeof...(arg)结果是arg的个数。
		- 例2：maximum(54,16,48,5);//不用initializer_list<>实现。
			int maximum(int n){return n;}//递归终止条件
			//在编译时就可计算出max的大小
			template<typename...Args>
			int maximum(int n, Args...args)
			{
				return std::max(n,maximum(args...));  
			}
		- 例3：递归的继承 tuple的实现
			template<tupename... Vaules> class tuple;
			template<> class tuple<>{};    //递归终止条件
			template<typename Head, typename... Tail>
			class tuple<Head,Tail...>:private tuple<Tail...>
			{
				typedef tuple<Tail...> inherited;
				protected:
					Head m_head;			
				public:
					tuple(){}
					tuple(Head v, Tail...vtail): m_head(v),inherited(vtail...){} //调用父类构造函数，而不是创建临时对象
					//error: typename Head::type head(){return m_head;} 编译不通过，因为原始类型不是类能不能用::type
					//通过，但复杂：auto head()->decltype(m_head) {return m_head;}
					Head head(){return m_head;}
					inherited& tail(){return *this;}
			}
	3)auto 自动推断类型,主要用到迭代器类型推断。
	4) initializer_list<>：调用时用参数用{}括起来。例：max({54,16,48,5}); //54
	5) for(decl : coll){statement}
	6) = default, =delete（主要作用到构造函数和赋值函数）
	7) alias Template(化名 模板) 
		例：
			template<typename T> using Vec = std::vector<T,MyAlloc<T>>;
			Vec<int> coll; //is equivalent to std::vector<int,MyAlloc<int>> coll;
			//不能对Vec进行特化或偏特化。
			若用define or typedef
			#define Vec<T> template <typename T> std::vector<T,MyAlloc<T>>;
			Vec<int> coll;// is equivalent to template<typename int> std::vector<int,MyAlloc<int>> coll; is wrong
			typedef std::vector<int,MyAlloc<int>> Vec; //is wrong
		
		设计一个测试函数，test(containter, elem);第一个参数传入一个容器类型，第二个参数是容器内元素的类型
		planA： tamplate<typename containter> test(containter c){
					typedef typename iterator_trait<typename containter::iterator>::value_type Valtype;
					//这样就可以及获取到容器的类型也可以获取到元素的类型。
				}
		planB：
				tip1: template template parameter
						template<typename T, template<class> class Container> class TEMP{};//这个类的第二个模板参数是一个类的类型
						TEMP<MySring,vector> c1;//这将报错，因为标准库中vector类有两个模板参数，第二个是内存分配器，虽然是默认的，
												//但是TEMP类定义的模板中所接受的类只有一个参数，这将导致定义与声明不一致
												//若在模板参数类中定义两个参数，但是第二个参数是由第一个参数推导而出的，这将不可实现。
												//在代码使用的时候没有办法得出第二个模板参数。
			 so: template<typename T> using Vec = std::vector<T,MyAlloc<T>>;
				  TEMP<MySring,Vec> c1; //这样的话声明就一致了，因为Vec只有一个模板参数，而第二个是由第一个参数，自动推出。
	8) type Alias
		- using func = void(*)(int,int);// is equivation to typedef void(*func)(int,int);
		- using value_type = T;// is equivations to typedef T value_type;
		
	   noexcept	:表示不抛异常
	   override : 告诉编译器这个函数是重写父类的虚函数 而不是重新定义一个新的函数
	   final ： 表示该类不能被继承 或 修饰虚函数不能被重写；
	9)decltype关键字：我们希望从表达式的类型推断出要定义的变量类型，但是不想用该表达式的值定义变量。 (同24)
		- 用来自动推断返回值类型：template<typename T1, tymplate T2> auto add(T1 x, T2 y) -> decltype(x,y);
		- 
	   decltype与auto的区别：
		1）auto忽略顶层const，decltype保留顶层const；
		2）对引用和解引用操作，auto推断出原有类型，decltype推断出引用。
		3）auto推断时会实际执行，decltype不会执行，只做分析。
	10)lambda表达式，匿名函数对象，c++11新特性。
		[函数对象参数] (操作符重载函数参数) mutable 或 exception 声明 -> 返回值类型 {函数体}
		- [函数对象参数]
			空: 没有任何参数
			= ：可使用所有局部变量，并以值的方式传递。
			& ：可使用所有局部变量，并以引用的方式传递。
			this : 可使用lambda所在类中的成员变量。
			a ：将a按值进行传递。但是不能修改a的值，要想修改必须加上mutable。
			&a：将a按引用传递
		- mutable 可以修改传递进来的拷贝。
		例：auto l = []{ std::cout<<"hello"<<std::endl;};
			l(); //prints "hello"
	11) 右值引用
		Lvalue：可以出现在 = 左侧
		Rvalue：只能出现在 = 右侧

	12）可变参数模板
	
	
- constexpr - specifies that the value of a variable or function can appear in constant expressions;
	- can computed at complie time //和宏类似
 34, new
	- A* a = new A[3]; //这样只能调用默认的构造函数，因为无法对每一个元素进行赋值
		for()
			new(a++) A(i); //通过for循环，对已有的地址的调用构造函数进行赋值。这叫做定点new （placement new）
							
		delete [] 调用三次析构函数。 而delete则调用一次析构函数，所以对于没有在内部分配过动态内存的类来说，delete不会发生内存泄漏。
	- new出来的空间必须是16的倍数。
	- new A() ==> (A*)operater new(sizeof(A)) ==> ::operater new(size_t) ==> malloc(size_t);
												 //所以可以重载A::operator new 写自己的内存管理函数。
	- 

- 单例模式：
	- 分为懒汉式和饿汉式，区别只在于创建实例的时间不同：
		- 懒汉式：只有当需要实例的时候才会去创建并使用实例。（非线程安全）
		- 饿汉式：系统一运行，就会初始化实例，当需要时，直接调用即可（线程安全）
	- 特点：
		- 构造函数和析构函数为私有的，目的是禁止外部构造和析构
		- 拷贝构造和赋值构造也是私有的
		- 类里有一个获取实例的静态函数，可以全局访问
	- 懒汉式单例（线程不安全）
		- class SingleInstance
		{
			public:
				static SingleInstance* GetInstance();
				static void deleteInstance();
			private:
				SingleInstance(){};
				~SingleInstance(){};
				
				//拷贝构造
				SingleInstance(const SingleInstance & s);
				//赋值构造
				const SingleInstance &operator=(const SingleInstance &s);
				
				//唯一单例对象指针
				static SingleInstance *m_SingleInstance;
		}

		//初始化静态成员变量
		SingleInstance* SingleInstance::m_SingleInstance = NULL;
		//线程不安全
		SingleInstance* SingleInstance::GetInstance()
		{
			if(m_SingleInstance == NULL){
				m_SingleInstance = new (std::nothrow) SingleInstance();//线程不安全
				//例：当线程1判断此时 m_SingleInstance 为NULL后，还没来得及new，此时去执行线程2，
				//而此时的线程2 判断 m_SingleInstance也为NULL ,所以就会创建两个实例
			}
			return m_SingleInstance;
		}
	- 懒汉式单例（线程安全）
		- class SingleInstance
		{
			public:
				static SingleInstance* GetInstance();
				static void deleteInstance();
			private:
				SingleInstance(){};
				~SingleInstance(){};
				
				//拷贝构造
				SingleInstance(const SingleInstance & s);
				//赋值构造
				const SingleInstance &operator=(const SingleInstance &s);
				
				//唯一单例对象指针
				static SingleInstance *m_SingleInstance;
				//这里声明一个锁，整个类公用一个锁
				static std::mutex m_Mutex;
		}

		//初始化静态成员变量
		SingleInstance* SingleInstance::m_SingleInstance = NULL;
		std::mutex SingleInstance::m_Mutex;
		//线程安全需要+锁
		SingleInstance* SingleInstance::GetInstance()
		{
			//双检锁，只有当指针为空的时候才加锁，不然每次调用GetInstance都会加锁，加锁的开销很大。
			if(m_SingleInstance == NULL){
				std::unique_lock<std::mutex> lock(m_Mutex);//加锁
				if(m_SingleInstance == NULL){
					m_SingleInstance = new (std::nothrow) SingleInstance();
				}
			}
			return m_SingleInstance;
		}	
		//删除操作也需要加锁
		void SingleInstance::deleteInstance()
		{
			std::unique_lock<std::mutex> lock(m_Mutex); // 加锁
			if (m_SingleInstance)
			{
				delete m_SingleInstance;
				m_SingleInstance = NULL;
			}
		}
	- 使用C++11内部静态变量
		Single &Single::GetInstance()
		{
			// 局部静态特性的方式实现单实例，因为静态变量在类中只会定义一个。
			static Single signal;
			return signal;
		}

	- 饿汉式（本身就线程安全）
		class Singleton
		{
		public:
			// 获取单实例
			static Singleton* GetInstance();

			// 释放单实例，进程退出时调用
			static void deleteInstance();
			
			// 打印实例地址
			void Print();

		private:
			// 将其构造和析构成为私有的, 禁止外部构造和析构
			Singleton();
			~Singleton();

			// 将其拷贝构造和赋值构造成为私有函数, 禁止外部拷贝和赋值
			Singleton(const Singleton &signal);
			const Singleton &operator=(const Singleton &signal);

		private:
			// 唯一单实例对象指针
			static Singleton *g_pSingleton;
		};

		// 代码一运行就初始化创建实例 ，本身就线程安全
		Singleton* Singleton::g_pSingleton = new (std::nothrow) Singleton;

		Singleton* Singleton::GetInstance()
		{
			return g_pSingleton;
		}

		void Singleton::deleteInstance()
		{
			if (g_pSingleton)
			{
				delete g_pSingleton;
				g_pSingleton = NULL;
			}
		}
- 手写一个类，包括构造函数，析构函数，复制构造函数，拷贝构造函数，
	class A
	{
		A();
		~A();
		//拷贝构造
		A(const A& other);
		//赋值构造
		const A& operator=(const A& other);
		int a;
		char *pData;
	}
	A::A()
	{
		a = 1;
		pData = new char[5];
	}
	A::~A()
	{
		delete pData;
	}
	A::A(const A& other)
	{
		a = other.a;
		char *tmp = new(nothrow) char[strlen(other.pData) + 1];
		if (tmp == nullptr)
			return;		
		pData = tmp;
	}	
	
	A& operator=(const A& other) {
		if (&other != this) {
			//如果是深拷贝，需要释放当前对象中的内存
			//然后动态分配一块新的内存，并用other中的数据进行初始化
			//最后把数据赋值给当前对象。
			//需要考虑异常安全性，因为new新内存的时候可能出错。
			/*
			    char *tmp = new(nothrow) char[strlen(other.pData) + 1];
				if (tmp == nullptr)
					return *this;

				strcpy(tmp, str.pData);

				delete []pData;
				pData = tmp;
				tmp = nullptr;
			*/
			a = other.a;
		}
		return *this;
	}

- 系统中锁的类型
	- 悲观锁，只要一访问，就需要加锁
		- 重量级锁
			- 获取不到锁，就阻塞
			- 耗时，因为阻塞到运行状态的切换，开销很大
		- 自旋锁
			- 获取不到锁，等一段时间，在进入阻塞状态
			- 在多处理器中使用，单处理器，自旋锁等待 时间就是空操作
		- 自适应自旋锁
			- 等待时间不是固定的，而是很具所得状态来调整
	- 乐观锁，只有当有冲突了才加锁
		- 例如两个线程都想修改一个变量，会保存一个旧预期值A,和一个新值B，
			当线程A提交更新之前，发现旧预期值与内存地址V中的值不一样，提交失败，
			线程将重新获取旧预期值和新值，这个过程成为自旋。
		- 上述被称为，CAS机制，比较并替换
		- 缺点：开销大，只能保证一个变量的原子操作
		- 轻量级锁
			- 使用CAS机制保证一个状态变量的原子性，通过状态变量判断是否有线程正在访问
			- 偏向锁
				- 适用于始终只有一个线程在执行一个方法的情况
		
		- 不可重入锁
			- 锁不可递归调用，不然就会产生死锁。
		- 可重入锁
			- 当判断上锁了之后，需要判断是哪一个线程进行上的锁，如果就是自己上的锁，那么就可以再锁一次
			- 维护一个加锁次数的变量
- linux下的ELF格式：
		- elf header : elf版本号，目标机器型号，程序入口地址
		- .text
		- .data
		- .bss
		- 
		-
		- 段表，section header table ：
			：描述所有段的信息，段的长度，偏移，读写权限
		- 字符串表，
		- 符号表，函数和变量，是链接的接口
			：分为全局符号，外部符号
		- 重定位表
	- 
- UDP,TCP,以太网，ip，icmp数据报的格式
	- 以太网：14字节
		- 前同步码（8字节）:
		- 目的地址（6），源地址（6），类型（2）(表示上层协议的类型)：mac地址 （这里14字节）
		- 数据（46~1500(MTU)）：
		- 帧检测（4）
	- ip：
		- 头部 + 数据
		- 头部：固定20个字节														（因为要进行切割）
			- 版本，头长度（共一字节），服务类型（1）总长度（16bit）（65535）（2），标志和偏移地址（4），存活时间和协议（各一个字节），校验和（2），源地址（4），目的地址（4）
	- UDP：
		- 8字节头部：源端口，目的端口，长度，校验和，各占2字节
	- tcp：
		- 头部20个字节：
			- 源端口（2），目的端口（2），序号（4），确认序号（4），标志位（2），窗口大小（2），校验和（2），紧急指针（2）
		- 紧急指针，和URG位共同使用，指明紧急数据之后正常数据的起始位置
		- 每个连接只有一个紧急指针。
- TCP粘包，什么情况下会发生，小于缓冲区一定会发生粘包吗？怎么避免粘包	
	- 粘包：发送端将多个包打包成一个包发送， nagle算法
	- 原因：1、发送端使用了nagle算法， 
			2、接受方，缓冲区存放了大量的数据包，然而应用层却不去读，最后一次性读多个包
- vector api
	- vector 初始化默认大小为0
	- 重新分配大小
		v.reserve(n) 
		v.resize(n) 
	- 查看还有多少剩余的容量
		v.capacity()
		
- 日志如何直到当前调用的函数
	__PRETTY_FUNCTION __ ： 获取完整的函数头信息
	__FUNCTION__ : 获取函数名
	__FILE__: 获取源文件的相对路径和名字
	__LINE__: 获取改行代码在文件中的行号
- new ，free能配套使用么，在编译阶段会报错么
	不可以；编译不会报错，只会在运行时报错，因为这个是一个逻辑问题，而不是一个语法问题。
- 如何调用dll
	- dll 要和.h .lib配合使用
	- 在原文件中include .h文件
	- 将.dll和lib放在相应的目录下面
	- 在dll中运用关键字， __declspec(dllexport)将所需要的导出
						__declspec(dllimport)将所需要的导入

- select、poll和epoll
	- 都是多路io复用
	- select用fd_set保存端口个数， 有最大连接限制， 32位默认1024个,时间复杂度O(n)
		- 线性扫描socket端口，效率低
	- poll 用链表存储，无连接数的限制， 时间复杂度O(n)
	- epoll 
	  - 时间复杂度O(1)
	  - 维护一个等待队列，将所有准备好的socket加入队列，当read后，只需要从就绪队列中读取数据就可以了
	  - 用mmap进行内存映射，使内核空间数据和用户空间数据共享，减少了内存的搬运
- A类如何访问B类的私有变量
	- 在B类中设置get和set方法
	- 友元类
		- 在B中声明A为自己的友元， friend class A；
			然后在A中定义B类对象，这样A就访问B类中的私有变量，
	- 友元函数
		- 将A类中的函数声明为B类中的友元函数
			在B类中声明， friend 返回值类型 A::函数名(参数表);
			这样A类中的函数就可以访问B中的私有变量
	- 用内存地址的方式，类对象中的数据都是顺序放置
		- class A
			{
				int value;
			}
			
			void f()
			{
			  A a;
			  *((int *)&a) = 5;
			}
- 定义一个只能在堆上（栈上）生成对象的类
	- 只能在堆上生成对象的类
		- 将构造函数私有化，必须用静态成员函数调用，函数里进行new操作，返回对象指针
		- 方法二 ： 析构函数私有化
	- 只能在栈上生成对象的类
		- 在类中重载new成一个私有的成员函数，外部就不能对这个类进行new操作了
		-  void* operator new(size_t val){}
- 大端、小端和网络字节序
	 - 网络字节序是大端序
	 - 大端序，高字节存放在低地址   
		优势：符号位的判断固定在第一个字节
	 - 小端序，低字节存放在低地址
		- Intel x86都是小端
		- 强制数据转换不需要调整内容
- 输入URL，发生了什么
	DNS进行域名解析，获取ip
	通过路由转发，和对方服务其进行通信
	TCP建立连接
	
- 进程、线程、协程
	- 进程
		- 创建：fork()
	- 线程：
		- 创建 ： std::thread t1(function) function中是线程的内容
		- 结束： t1.join() 确保在main函数结束之前结束
		
- redies的底层数据结构： redis的缓存穿透、缓存击穿、缓存雪崩
	 - 字符串
		- SDS（简单动态字符串）
		- 数据结构，结构体头部放置长度，free：还剩多少空间，最后用一个柔性数组进行储存长度可变的字符串
		  这就是所谓的动态字符串
		- 有一个预分配的操作
		- 在缩短字符串时有一个惰性空间释放的过程，避免了内存重新分配
		- 惰性空间： 
	 - 双向链表
	 - 压缩链表
		- 连续存储
		- 维护一个头 和 尾， 每个节点数据放在中间，
		- 每个结点有个个字段存储上一个节点的长度，这样就可以直接定位到上一个节点，实现顺序查找
		- 连锁更新，
			有时插入一个将大的节点，previous_entry_length长度会从1字节变为5字节，
			这样会导致后续节点都需要进行更新
	 - hash表
		- 维护两个hash_table, 用于rehash操作，利用渐进式rehash
	 - intset
	 - 跳表
		- 增加索引，从最高级索引开始查找，然后一直下降，直到找到目标元素，增加查找效率
		-索引不存放对象，只存放key，这样在存放大对象时，避免了内存的浪费
	 - set
	 - zset
	 - list
	 - 缓存，是为了解决大量的访问，短时间内无法完成从磁盘读取大量数据的情况
	 - 缓存穿透， 一直查询一个不存在id数据，就会压垮数据源
		- 解决方案： 1、将所有的数据存放在哈希里，通过哈希进行过滤，
					2、如果数据为空，我们也把这个空数据加入到缓存中，只不过过期时间会短一些
	 - 缓存击穿，key对应的数据存在，但在缓存中过期，这时就会从后端DB中获取数据，这样也会压垮数据库
				- 发现缓存中没有对应的KEY时，先对这个key值进行加锁，然后去load DB 回设缓存
	 - 缓存雪崩，缓存服务器重启或者失效，这样也会对后端DB带来很大压力
				- 加锁
	 

- 死锁条件，避免死锁
	- 互斥， 占有等待， 不可抢夺， 循环等待
	- 解决方法，1、一次性获取所有资源，2、加上过期时间，

- linux命令如何查看端口占用的情况
	netstat

- linux命令，ls -l中的d、b、l分别表示什么
	d ： dirtectory 目录
	b ： block 设备文件
	l ： link 链接文件
	c :	 character 文件
	s : sock文件
- Linux 链接：
	- 概念： 类似与快捷方式
	- 硬链接：源文件的别名，都指向同一文件， 类似与引用
	- 软链接：创建一个新的文件，文件内容指向链接文件，类似与指针
	- 用ln创建链接 -s 选择是软连接还是硬链接
		ln -s 源文件 目标文件
- linux命令如何给进程发送信号
	- kill 杀死进程
	
- IO模型
	- IO读取数据分为两个阶段，一个是请求数据，一个是传输数据，不管用那种模型，在传输数据阶段都会阻塞
		区别就在于请求数据的方式不一样
	- 阻塞
		- 阻塞与请求数据
	- 非阻塞
		- 请求数据不阻塞，直接返回结果，主程序需要轮询
	- 信号驱动
		- 当数据到达缓冲区时，主动发信号给进程，然后进程执行请求数据和出局传输操作
	- 多路复用
		- 查看 select、poll和epoll 的区别
	- 异步
		- 发送读取数据的信号后，就不用管了，内核自动执行完数据传输操作，传输完毕后，通知进程
	
- 同步 异步 异步是如何实现的
	- 同步可以理解， 順序執行，A調用B后，需要等待B返回，才能繼續執行
	- 異步的話，A调用B后，继续执行后面的程序

- vector如何保证线程安全
	 - 加锁，但是开销大
	 - resize， 禁用push_back
	 - reserve只是为push_pack 预留空间， 而resize会调用元素的构造函数。
	 - 关联容器的线程安全问题
		- 锁
		
- 宏定义缺点
	 -相对于const， 不会对类型进行检查，相对不是很安全
	 - 未加括号带来的边界效应
	
- window应用程序的启动过程
	第一步： explorer.exe ，这是window下的图形壳，所有的应用程序启动的时候，由该进程调用createProcess函数
			创建相应的进程。
	第二步 ： createProcess，创建内核进程对象，维护进程的信息，分配进程虚拟地址
	第三步：初始化虚拟地址空间。PEloader会读取EXE文件信息，然后进行映射，然后读取导入地址表，这里存放着exe文件
			所需要的DLL
	第四步：创建进程的主线程。
	第五步：运行期初始化，执行startup函数，首先进行一些结构体的初始化，然后用户程序代码才会执行。

- MFC消息映射机制的原理
	- 功能，将消息与处理函数绑定的机制。
	- SDK中的消息，由窗口处理函数执行一个消息循环，用switch拦截消息后调用相应的消息处理函数，直到遇到结束
		消息为止。
	- MFC中维护一张消息映射的表，由窗口基类定义，派生窗口接受一个消息时会处理父类的消息处理函数，
	- 数据结构
		//下面就是消息映射表
		struct AFX_MSGMAP_ENTRY{ 
			UINT nMessage;   // Windows消息的ID号 
			UINT nCode;  // 控制消息的通知 
			UINT nID;    // Windows控制消息的ID 
			UINT nLastID;   //表示是一个指定范围的消息被映射的范围 
			UINT nSig;  //表示消息的动作标识 
			AFX_PMSG pfn;    // 指向消息处理函数的指针 };
			
		pfn 等同于 ：
			void (CCmdTarget::*pfn)();    // 提示：AFX_PMSG为类型标识，
			  具体声明是：
			  typedef void (AFX_MSG_CALL CCmdTarget::*AFX_PMSG)(void);
		//有了消息映射表的数据结构，我们就可以定义一个数组，来保存消息
				AFX_MSGMAP_ENTRY _messageEntries[];
		
		//每个窗口类都对应这一个数组，我们需要将所有的数组串联起来，这就是消息传递机制，
		struct AFX_MSGMAP{ 
					const AFX_MSGMAP* pBaseMap;       		//指向别的窗口类
					const AFX_MSGMAP_ENTRY* lpEntries; 		//指向自身的消息表
					};
		//之后在每一个打算响应消息的类中声明 AFX_MSGMAP messageMap；其中base指向基类或者其他类，
			那么就会有一张消息映射表组成的网。
		//为了方便查找，每一个窗口对象都维护两个函数，可以直接查找到自身的消息映射表和基类的映射表。
	- 消息处理过程，消息会从window传递给当前活动窗口
		CWinThread::PumpMessage -> CWnd::PretranslateMessage -> /
		CWnd::WalkPreTranslateMessate -> CD1Dlg::PreTranslateMessage -> /
		CDialog::PreTranslateMessage -> CWnd::PreTranslateInput   -> /
		CWnd::IsDialogMessageA -> USER32内核 - > AfxWndProcBase ->  /
		AfxWndProc -> AfxCallWndProc -> CWnd::WindowProc -> /
		CWnd::OnWndMsg -> CWnd::OnCommand -> CDialog::OnCmdMsg -> /
		CCmdTarget::OnCmdMsg -> _AfxDispatchCmdMsg -> CD1Dlg::OnButton1()
				 
	- 消息映射宏
		- 创建数据结构
		#define DECLARE_MESSAGE_MAP() /   
			private: /          
				  static const AFX_MSGMAP_ENTRY _messageEntries[]; /           
			protected: /          
				  static AFX_DATA const AFX_MSGMAP messageMap; /          
				  virtual const AFX_MSGMAP* GetMessageMap() const; / 
		- 给数据结构进行赋值
		#define BEGIN_MESSAGE_MAP(theClass, baseClass) /       
			  const AFX_MSGMAP* theClass::GetMessageMap() const /                
			  { return &theClass::messageMap; } /       
			  AFX_COMDAT AFX_DATADEF const AFX_MSGMAP theClass::messageMap = /               
			  { &baseClass::messageMap, &theClass::_messageEntries[0] }; /       
			  AFX_COMDAT const AFX_MSGMAP_ENTRY theClass::_messageEntries[] = /                
			  { /        

		#define ON_COMMAND(id, memberFxn) /      
			  { WM_COMMAND, CN_COMMAND, (WORD)id, (WORD)id, AfxSig_vv, (AFX_PMSG)&memberFxn },    
		 
		#define END_MESSAGE_MAP() /       
			  {0, 0, 0, 0, AfxSig_end, (AFX_PMSG)0 } /   
		}; /
			
- C++ 内存对象模型
	- 虚函数表示一个存放虚函数地址的表，虚函数地址出现的顺序与类中虚函数声明的顺序一致。
	- 数据成员：
		- 静态
		- 非静态
	- 成员函数：
		- 静态
		- 非静态
		- 虚函数
	- 对象模型：
		- 非静态成员数据放在对象中，静态成员数据被置于类对象之外
		- 静态和非静态成员函数也放置在类对象之外，而虚函数通过虚函数表+虚指针来支持
		- 构函数也在虚函数表中
		- 在派生类的虚函数表中，如果重写虚函数，替换地址，新的虚函数添加在末端
		- 在多继承的情况下，派生类维护两个虚函数指针，对重写的方法在每个表里都更新，然后，由继承顺序放置
			在对象的头部，最后再放入自己的数据，基类的成员变量也需要加入到派生类当中，放置在虚函数指针的下面

			
- 进程间的通信方式详解
	- 管道：只能在有血缘关系的进程间通信
		- 创建方式： int pipe(int f[2]); //f[0], f[1]两个文件描述符, 成功返回0，失败返回-1
		- fork后，父进程的f[1]写，子进程的f[0]读，这样就做到了进程间的通信。
		- 进行4次数据操作，用户到内核，内核到内存，内存到内核，内核到用户
		- 消息队列也是内核对象，需要进行系统调用，所以也要进行4次数据操作，
	- 命名管道是一种特殊的文件，用open打开一个fifo，mkfifo()进行创建
	- 消息队列
		- 与命名管道不同的是，消息队列可以独立于进程存在，发送消息可以避免命名管道的同步和阻塞问题
		- 异步的
	- 信号量，实际是一种互斥的作用
	- 共享内存
		- 速度快，直接对内存进行存取
		- 因为多个进程可以同时操作，所以需要进行同步
- 线程中通信方式
	- 互斥锁 ： 访问数据之前需要加锁，这样可以避免其他线程访问，访问结束后需要解锁，这样就可以让其他线程
		访问，但是这样开销大。
		class Foo {
			mutex mtx_1, mtx_2;
			unique_lock<mutex> lock_1, lock_2;
		public:
			Foo() : lock_1(mtx_1, try_to_lock), lock_2(mtx_2, try_to_lock) {
			}

			void first(function<void()> printFirst) {
				printFirst();
				lock_1.unlock();
			}

			void second(function<void()> printSecond) {
				lock_guard<mutex> guard(mtx_1);
				printSecond();
				lock_2.unlock();
			}

			void third(function<void()> printThird) {
				lock_guard<mutex> guard(mtx_2);
				printThird();
			}
		};
	- 条件变量，必须和互斥锁搭配使用，互斥锁用于上锁，条件变量用于等待事件发生
		首先进行上锁操作，然后阻塞等待唤醒通知，通过标志位的值，唤醒对应的线程，然后解锁。
			每个线程都有自己的一把锁，这样就只lock一次，避免了重复上锁的开销。
		- class Foo {
				condition_variable cv;
				mutex mtx;
				int k = 0;
			public:
				void first(function<void()> printFirst) {
					printFirst();
					k = 1;
					cv.notify_all();    // 通知其他所有在等待唤醒队列中的线程
				}

				void second(function<void()> printSecond) {
					unique_lock<mutex> lock(mtx);   // lock mtx
					cv.wait(lock, [this](){ return k == 1; });  // unlock mtx，并阻塞等待唤醒通知，需要满足 k == 1 才能继续运行
					printSecond();
					k = 2;
					cv.notify_one();    // 随机通知一个（unspecified）在等待唤醒队列中的线程
				}

				void third(function<void()> printThird) {
					unique_lock<mutex> lock(mtx);   // lock mtx
					cv.wait(lock, [this](){ return k == 2; });  // unlock mtx，并阻塞等待唤醒通知，需要满足 k == 2 才能继续运行
					printThird();
				}
			};
		- wait函数有两种形式，一种是只有一个参数，无条件唤醒，并重新lock
	- 信号量
		- #include <semaphore.h>

			class Foo {
			private:
				sem_t sem_1, sem_2;

			public:
				Foo() {
					sem_init(&sem_1, 0, 0), sem_init(&sem_2, 0, 0);
				}

				void first(function<void()> printFirst) {
					printFirst();
					sem_post(&sem_1);
				}

				void second(function<void()> printSecond) {
					sem_wait(&sem_1);
					printSecond();
					sem_post(&sem_2);
				}

				void third(function<void()> printThird) {
					sem_wait(&sem_2);
					printThird();
				}
			};
			
			
			
- SEH
	- 每个线程的信息中TIB中，都会存放一个异常链表，里面存放着每个线程的异常处理函数，
		和指向另一个结构体的指针。
		typedef struct _EXCEPTION_REGISTRATION_RECORD {
			 struct _EXCEPTION_REGISTRATION_RECORD *Prev; //指向前一个EXCEPTION_REGISTRATION的指针
			 PEXCEPTION_ROUTINE Handler; //当前异常处理回调函数的地址
		} EXCEPTION_REGISTRATION_RECORD;
	- EXCEPTION_DISPOSITION __cdecl _except_handler(

			 struct _EXCEPTION_RECORD *ExceptionRecord,//指向包含异常信息的EXCEPTION_RECORD结构
			 void* EstablisherFrame,//指向该异常相关的EXCEPTION_REGISTRATION结构
			 struct _CONTEXT *ContextRecord,//指向线程环境CONTEXT结构的指针
			 void* DispatcherContext){ //该域暂无意义

			 ……

			//4种返回值及含义
			//1.ExceptionContinueExecution(0)：回调函数处理了异常，可以从异常发生的指令处重新执行。
			//2.ExceptionContinueSearch(1)：回调函数不能处理该异常，需要要SEH链中的其他回调函数处理。
			//3.ExceptionNestedException(2)：回调函数在执行中又发生了新的异常，即发生了嵌套异常
			//4.ExceptionCollidedUnwind(3)：发生了嵌套的展开操作

			return …
		}
	- 每个线程TIB中的头部都会放有指向_EXCEPTION_REGISTRATION_RECORD的指针，然后通过_except_handler函数
		查找是否能处理异常，如果不能处理异常，就会通过prev指针，想外层的_EXCEPTION_REGISTRATION_RECORD中查找，直到
		找到能处理异常的函数为止。
		
		
		
		
- 智能指针
	1）auto_ptr智能指针是一个类指针对象，其析构函数自动对其所指向对象调用delete。
		若通过拷贝构造或赋值运算符复制他们，他们会变成null，而复制所得的指针将取得资源的唯一拥有权。
	2）shared_ptr指针就是引用计数型智慧指针，持续追踪共有多少对象指向某笔资源，并在无人指向它时自动删除该资源。
		- 可通过ptr.use_count()来查看引用的个数
		- 缺点：当两个对象互相使用一个share_ptr成员变量指向对方，会造成循环引用
				class B;	//声明
				class A
				{
				public:
					shared_ptr<B> pb_;
					~A()
					{
						cout << "A delete\n";
					}
				};

				class B
				{
				public:
					shared_ptr<A> pa_;
					~B()
					{
						cout << "B delete\n";
					}
				};

				void fun()
				{
					shared_ptr<B> pb(new B());
					shared_ptr<A> pa(new A());
					cout << pb.use_count() << endl;	//1
					cout << pa.use_count() << endl;	//1
					pb->pa_ = pa;
					pa->pb_ = pb;
					cout << pb.use_count() << endl;	//2
					cout << pa.use_count() << endl;	//2
				}

				int main()
				{
					fun();
					return 0;
				}
		- weak_ptr：解决上述问题，只需要将shared_ptr pb_，改为weak_ptr pb_ , 这样的话，资源B的引用开始就只有1
		- 我们不能通过weak_ptr直接访问对象的方法，而是需要将其转换成share_ptr指针。
			shared_ptr<B> p = pa->pb_.lock();
		- 源码分析
	4）unique_ptr 独占所指向的对象， 不能将一个unique_ptr对象赋值给另一个对象，但是如果unique对象是一个
		临时右值时这是允许的。但是可以通过move转移所有权
	

	- 线程安全问题

- KMP算法：

	
