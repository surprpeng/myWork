- TCP采用超时重传，来解决可靠性问题；ip协议不保证可靠性，全部采用大端序（最高位在左边，最低位在右边）
- 传输层：tcp、udp
- 网络层：ip、ICMP、igmp
- 链路层：arp，rarp，硬件接口
- DNS（域名系统）是一个分布的数据库，提供IP地址和主机名之间的映射
- ip协议：首部20个字节
	- TLL生存时间设置了数据报可以经过的最多路由器数。
	- ip数据报最长可达65535字节，16bit存储，但一般不会传输这么大
- arp协议：
	- 地址解析协议
	- 提供32bit的IP地址和数据链路层所使用的地址之间的映射
	- arp以广播的形式去询问把本地网络中的每个主机是否是目的地址，如果是发送包括IP地址和硬件地址的应答
	- arp高速缓存，存放最近访问过得ip地址与硬件地址之间的映射
	- arp代理，路由器欺骗发送端
- rarp协议：
	- 逆地址解析协议
	- 在系统启动时，会在磁盘的配置文件中读取IP地址，但是对于无盘地址来说，需要通过发送
		rarp请求，（广播形式），询问服务器，自身的IP地址
	- rarp广播在硬件层进行广播，不经过路由转发
- icmp协议：internet控制报文协议。
	- 报文在ip数据报内部被传输，发送差错报文，或其他信息
	- 请求报文用来再无盘系统中获取自身的子网掩码
- ping程序就是发送一份icmp报文测试是否可达
- traceroute程序：发送一系列ip数据包，TTL从1开始递增，这样经过的路由就会依次返回icmp超时报文，
	最后再向目的主机发送UDP数据报，并设置一个端口口不可达。
- rip协议：选路信息协议。rip报文包含在udp报文中。是一种距离向量协议。
- ospf协议：开放最短路径优先。BGP协议：边界网关协议。
- udp协议：用户数据报协议。首部8个字节
- 多播和广播：
	- 使用广播的问题在于它增加了对广播数据不感兴趣主机的处理符合。udp广播一般数据要传至传输层
		才会被丢弃。多播的出现减少了对应用不感兴趣主机的处理负荷吗，在物理层就会被丢弃。
	- 广播地址：子网号和主机号全为1。
- IGMP: INTERNET组管理协议
	- 它让一个物理网络上的所有系统知道主机所在的多播组。
	- 多播路由器向每个主机定时发送IGMP报文来查询主机是否在一个组中。
- DNS系统：
	- 是一种基于TCP/IP应用程序的分布式数据库，它提供主机名到ip地址之间的转换，即有关电子邮件的选路信息。
	- 为了减少DNS的通信量，所有的名字服务器均使用高速缓存。
	- 每个主机都有一个名字解析器。名字解析器向一个本地名字服务器发送查询请求。名字服务器均使用高速缓存。减少
		对DNS服务器的通信量。
- TFTP:简单文件传送协议
	- 使用UDP，最初用于引导无盘系统。
- BOOTP:引导程序协议。
	- 使用UDP，和TFTP协同工作，用于无盘系统的引导，
	- 固话在只读存储器上，可以由路由器转发。
	- 他为引导无盘系统获得他的ip提供了除rarp外的另外一种选择。
- TCP：传输控制协议，是一种字节流服务。首部20个字节。
	- TCP可靠性通过以下手段保证
		- 应用数据被分割成TCP认为最合适发送的数据块。
		- 超时重传
		- 每一个数据都有一个确认信号
		- tcp首部和数据校验和
		- 对数据包进行排序
		- 丢弃重复数据包
		- 流量控制：每一方都有固定大小的缓冲空间，溢出则丢弃，流量控制防止溢出。
	- 连接和终止：
		- 三次握手和四次挥手。
		- 连接超时，第一次时间6秒，第二次24秒。客户端建立连接最长时间限制是75秒。
		- MSS最大报文长度。
		- tcp的半关闭： 发送FIN（文件结束）给另一端。发送端就关闭了。一般情况下，另一端会强制关闭，也发送FIN
********- 状态变迁图：
								 客户				服务器
									|					| LISTEN(被动打开)
			(主动打开)  SYN_SENT    |------SYN-			|
									|		-------->	| SYN_RCVD
									|			------- |
						ESTABLISHED	|	<----SYN,ACK	|
									|-------			|
									|		ACK------>	| ESTABLISHED				
									|					|				
									|					|				
									
									|					| LISTEN(被动打开)
			(主动关闭)  FIN_WAIT1   |-------FIN			|
									|		-------->	| CLOSE_WAIT(被动关闭)
									|			------- |
						FIN_WAIT2	|	<----ACK--		|
									|			------- |LAST_ACK
						TIME_WAIT	|	<-----FIN		|			
									|-------			|
									|		--ACK---->	| CLOSED									
									|					|				
									|					|
									|					|				
									|					|
		- TIME_WAIT状态也称为2MSL等待状态。
			- 当TCP执行主动关闭后，接收到最后一个ack后，该连接必须在TIME_WAIT状态停留时间为2倍的MSL。
				这样可以让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时重发最后的FIN）
		- 在TIME_WAIT状态，端口不能被使用。任何迟到的报文都会被丢弃。
		- 平静时间，重启后的MSL秒内不能建立任何连接。不然就会把迟到的报文作为新连接的数据。
		- 复位报文段。可以发送复位报文而不是发送FIN来关闭一个连接。（异常释放）
			- 好处：丢弃任何代发数据并立即发送复位报文段。
					接受放区分是RST还是FIN。收到RST不会发送任何ACK而是而是将终止该连接，并复位。
		- 半打开：如果一方已经关闭或异常终止连接而另一方却还不知道，我们称之为半打开。
			- 原因是一方突然掉电而不是正常结束后再关机，另一方就处于半打开状态。
			- 复位作为半打开连接上数据段的应答。
		- 同时打开：每一方必须发送syn且必须收到。
			- 同时打开仅建立一条连接。
			- 进行4次握手，每一端既是客户又是服务器。
		- 同时关闭：
		- 本地地址： *.23表示传入的连接请求将被任何一个本地接口接受。
		- 呼入连接请求队列：
			- 放置以被TCP接受但是还没有被应用层接受的。
			- 当一个syn来到时，需要判断连接对列的连接数量来判断是否接受该连接。
	- TCP通信分为交互数据流和块数据流
		- 交互数据流实现流量控制的手段
			- 经受时延的确认：tcp接收到数据后并不立即发送ack，它延迟发送，以便和需要发送的数据一起发送
			- nagle算法：保证tcp连接上最多只能有一个未确认的小分组。在确认到达前，合并所有待发送分组，一并发送。
		- 块数据流：
			- 滑动窗口协议：接受方不必确认每一个收到的分组，在tcp中，ack是累积的，他表示已接受方已经正确收
					到的了一直到确认序号减1的所有字节。
			- 发送方有管理拥塞窗口，接收方管理接受窗口，根据窗口剩余值，相互控制对方是否发送数据。
			- PUSH标志：该标志通知接收方把所有的数据全部提交给接收进程。
			- 慢启动：最开始拥塞窗口为1，没收到一个ack就+1，直至达到拥塞。
		- 超时重传
			- 发送数据时开启一个定时器，溢出后就重传。
			- 超时时间应该根据RTT的变化而变化。
			- 块速重传算法：当接收方接受的数据缺失时，重复发送ACK，当发送方收到3个ACK后，
						无需等待定时器溢出，直接进行重传。
			- 拥塞避免算法：慢启动算法的拥塞窗口每次都+1，而拥塞避免算法每次收到ACK后加1/CWND;
			- 快恢复算法：当出现重传后，将ssthresh（慢启动门限）设置为cwnd的一半，cwnd每次加1，当接收到下一个ACK后，
				就将cwnd设置为ssthresh，也就是速率减半。
		- 拥塞控制例子：
			- 首先设置ssthresh初始值，例512字节。
			- 开始慢启动，当拥塞窗口达到ssthresh后，开始拥塞避免算法。
			- 当收到重复的ACK后，执行快重传算法和快恢复算法。
	- TCP坚持定时器
		- tcp不会对ack信号进行确认，如果ack信号丢失，那么发送方可能一直发不了数据，因为上一个ack的窗口大小为0.
		- 坚持定时器，就是发送方定时的去询问接收方的窗口大小。
		- 糊涂窗口综合征：少量的数据通过连接进行交换，而不是满长度的报文段
	- TCP保活定时器
		- 在连接两端系统的网络出现临时故障的时候，保活选项会引起一个实际上很好的连接终止。
		- 保活定时器是为了检测半开放连接，当另一端永远不启动，不能发送复位的情况。
- SNMP: 简单网络管理协议
- FTP,SMTP协议

--------------------------- HTTP     ----------------------------
- URI : 统一资源标识符，用于定位互联网上的资源
- 请求报文是由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成的。
- 响应报文由协议版本、状态码，用以解释状态码的原因短语、可选的响应首部字段以及实体主体。
- HTTP是一种无状态协议。立即响应，不保留之前一切的请求或响应报文的信息。 
- 请求方法： 
	- GET：用来获取已被URI识别的资源。
	- POST: 用来传输实体主体。虽然GET也可以传输，但一般不用。
	- PUT ：传输文件
	- HEAD ：获得报文首部，和GET一样，但是不返回报文主体部分，用于确认URI的有效性及资源更新的日期时间等。
	- DELETE ： 用来删除文件。
	- OPTIONS：询问服务器支持的方法
	- TRACE ：追踪路径，让服务器将之前的请求通信环回给客户端的方法。
	- CONNECT ：要求用隧道协议连接代理
- 持久连接：只要任意一端没有提出断开连接，就不会断开TCP连接。
- 管线化系数，不用等待响应也可直接发送下一个请求，这样能够同时发送多个请求。
- 使用cookie的状态管理 ：
	- http是无状态的。
	- 通过在请求和响应报文中写入Cookie信息来控制客户端的状态。
- 范围请求 ：当数据传输中断后，需要从中断位置后获取数据，而不是重新全部发送。
- 内容协商：会响应以响应资源的语言、字符集、编码方式等作为判断的基准。
- 状态码：由3位数字加上原因短语组成
	- 1XX : 正在处理
	- 2XX ：请求正常处理完毕
		- 200 OK
		- 204 No Content : 表示请求成功处理，但是服务器不返回任何资源。
		- 206 Partial Content ： 表示客户端进行了范围请求，而服务器成功执行		
	- 3XX ： 需要进行附加操作以完成请求 ，重定向状态码
		- 301 Moved Permanently ：表示请求的资源已经被分配了新的URI，以后都用新的URI （永久性重定向）
		- 302 Found ：本次能使用新的URI访问 （临时性重定向）
		- 303 See Other : 请求对应的资源存在另一个URL，应使用GET方法定向获取请求的资源。
						 与302功能相似，但明确客户端用GET方法请求资源。
		- 304 Not Modified : 服务器允许请求访问资源，但未满足条件。
		- 307 Temporary Redirect : 和302 Found 相似。
	- 4XX ： 服务器无法处理请求
		- 400 Bad Request : 报文中存在语法错误
		- 401 Unauthorized : 需要认证
		- 403 Forbidden : 被服务器拒绝访问了。
		- 404 Not Found : 服务器没有请求的资源。
	- 5XX ： 服务器处理请求出错
		 - 500 Internal Server Error : 服务器内部出错
		 - 503 Service Unavailable : 服务器处于超负载或者正在停机维护
- 通信数据转发程序：代理、网关、隧道
	- 代理 ：扮演服务器个客户端”中间人“的角色。
		- 利用缓存技术减少网络带宽
			- 预先将资源的副本保存在代理服务器上。
		- 组织内部针对特定网站的访问控制
	- 网关 ： 是转发其他服务器通信数据的服务器。
		- 网关和代理非常相似，而网关能使通信线路上的服务器提供非HTTP协议的服务。
		- 网关能提高通信的安全性。可以在线路上进行加密。
	- 隧道 ： 在相隔甚远的客户端和服务器两者之间进行中转
		- 保证远距离安全通信。
- https
	- http缺点：
		- 使用明文通信
		- 不验证对方的身份
		- 无法保证报文的完整性
	- http + ssl 就是 https ；将整个通信线路加密处理
	- https通过证书，确认对方身份
		- 由第三方机构颁发，用以证明双方是实际存在的。	- 
	- ssl提供认证，加密处理和摘要功能
	- 加密：
		- 对称（共享）密钥加密 ：加密和解密都用相同的密钥
		- 公开密钥加密：使用一对非对称的密钥。公钥加密，私钥解密
	- https采用共享密钥加密和公开密钥加密两证并用的混合加密机制。
		- 使用公开密钥加密传输对称（共享）密钥，使用共享密钥通信。
	- 数字证书认证机构和证书保证公开密钥的正确性。如何保证证书的安全，一般浏览器会在内部植入常用认证
		机构的公开密钥。
	- ssl很慢
