2.1 将线程封装一个类对象
class thread_guard
{
  std::thread& t;
public:
  explicit thread_guard(std::thread& t_):
    t(t_)
  {}
  ~thread_guard()
  {
    if(t.joinable()) // 1
    {
      t.join();      // 2
    }
  }
  thread_guard(thread_guard const&)=delete;   // 3
  thread_guard& operator=(thread_guard const&)=delete;
};

struct func; // 定义在代码2.1中

void f()
{
  int some_local_state=0;
  func my_func(some_local_state);
  std::thread t(my_func);
  thread_guard g(t);
  do_something_in_current_thread();
}    // 4



2.2 传递参数
  线程的参数传递将会拷贝到新线程的内存空间中，即使函数中的参数是引用的形式
  void f(int i,std::string const& s);
  void not_oops(int some_param)
  {
    char buffer[1024];
    sprintf(buffer,"%i",some_param);
    std::thread t(f,3,std::string(buffer));  // 使用std::string，避免悬空指针
    t.detach();
  }
  虽然buffer可以隐式的转换为string，但这个需要过程，如果在转换期间，主线程结束啦，那么buffer就可能成为一个空指针。这是参数是
  常量引用的情况。若参数传递是非常量引用时，
  void update_data_for_widget(widget_id w,widget_data& data); // 1
  void oops_again(widget_id w)
  {
    widget_data data;
    std::thread t(update_data_for_widget,w,data); // 2
    display_status();
    t.join();
    process_widget_data(data);
  }
  虽然update_data_for_widget①的第二个参数期待传入一个引用，但std::thread的构造函数②并不知晓，
  构造函数无视函数参数类型，盲目地拷贝已提供的变量。不过，内部代码会将拷贝的参数以右值的方式进行传递，
  这是为了那些只支持移动的类型，而后会尝试以右值为实参调用update_data_for_widget。但因为函数期望的是一个非常量引用作为参数(而非右值)
  ，所以会在编译时出错。对于熟悉std::bind的开发者来说，问题的解决办法很简单：
  可以使用std::ref将参数转换成引用的形式。因此可将线程的调用改为以下形式：

    std::thread t(update_data_for_widget,w,std::ref(data));

  可以传递一个成员函数，通过bind机制进行参数传递
class X
{
public:
  void do_lengthy_work(int);
};
X my_x;
int num(0);
std::thread t(&X::do_lengthy_work, &my_x, num);



2.3   转移所有权
  线程对象可以通过move转移所有权。这个操作必须等待线程结束再能进行，并且需要线程的所有权能够进行转移。
    void some_function();
    void some_other_function();
    std::thread t1(some_function);            // 1
    std::thread t2=std::move(t1);            // 2
    t1=std::thread(some_other_function);    // 3
    std::thread t3;                            // 4
    t3=std::move(t2);                        // 5
    t1=std::move(t3);                        // 6 赋值操作将使程序崩溃
    #3 临时对象在坐移动操作的时候将会隐式调用std::move()
    
   线程所有权可以向函数外进行转移，比如在函数返回值中传递一个std::thread对象
   线程所有权也可以向函数内部转移，不如作为形参传入函数内。
    一旦对某个对象转移了线程的所有权，就不能对线程进行汇入或分离。为了确保线程在程序退出前完成，定义scoped_thread类
    class scoped_thread
    {
      std::thread t;
    public:
      explicit scoped_thread(std::thread t_): // 1
        t(std::move(t_))
      {
        if(!t.joinable())  // 2
          throw std::logic_error(“No thread”);
      }
      ~scoped_thread()
      {
        t.join(); // 3
      }
      scoped_thread(scoped_thread const&)=delete;
      scoped_thread& operator=(scoped_thread const&)=delete;
    };

    struct func; // 定义在代码2.1中

    void f()
    {
      int some_local_state;
      scoped_thread t(std::thread(func(some_local_state)));    // 4
      do_something_in_current_thread();
    } // 5


 量产线程
 void do_work(unsigned id);

  void f()
  {
    std::vector<std::thread> threads;
    for (unsigned i = 0; i < 20; ++i)
    {
      threads.emplace_back(do_work,i); // 产生线程
    } 
    for (auto& entry : threads) // 对每个线程调用 join()
      entry.join();       
  }
  确定线程的数量
  template<typename Iterator,typename T>
  struct accumulate_block
  {
    void operator()(Iterator first,Iterator last,T& result)
    {
      result=std::accumulate(first,last,result);
    }
  };

  template<typename Iterator,typename T>
  T parallel_accumulate(Iterator first,Iterator last,T init)
  {
    unsigned long const length=std::distance(first,last);

    if(!length) // 1
      return init;

    unsigned long const min_per_thread=25;
    unsigned long const max_threads=
        (length+min_per_thread-1)/min_per_thread; // 2

    unsigned long const hardware_threads=
        std::thread::hardware_concurrency();

    unsigned long const num_threads=  // 3
        std::min(hardware_threads != 0 ? hardware_threads : 2, max_threads);

    unsigned long const block_size=length/num_threads; // 4 每个线程所需要计算的数量

    std::vector<T> results(num_threads);
    std::vector<std::thread> threads(num_threads-1);  // 5 少分配一个线程，因为有一个主线程

    Iterator block_start=first;
    for(unsigned long i=0; i < (num_threads-1); ++i)
    {
      Iterator block_end=block_start;
      std::advance(block_end,block_size);  // 6
      threads[i]=std::thread(     // 7
          accumulate_block<Iterator,T>(),
          block_start,block_end,std::ref(results[i]));
      block_start=block_end;  // 8   每个线程计算block_size个数
    }
    accumulate_block<Iterator,T>()(
        block_start,last,results[num_threads-1]); // 9 计算最后一个block

    for (auto& entry : threads)
      entry.join();  // 10

    return std::accumulate(results.begin(),results.end(),init); // 11
  }

  2.5 线程标识为std::thread::id
  获取id方法：
    - 可以通过调用std::thread对象的成员函数get_id()来直接获取。如果std::thread对象没有与任何执行线程相关联，
  get_id()将返回std::thread::type默认构造值，这个值表示“无线程”。
    - 当前线程中调用std::this_thread::get_id()(这个函数定义在<thread>头文件中)也可以获得线程标识。
  
  - std::thread::id对象可以自由的拷贝和对比，因为标识符可以复用。如果两个对象的std::thread::id相等，
    那就是同一个线程，或者都“无线程”。如果不等，那么就代表了两个不同线程，或者一个有线程，另一没有线程。

 3.0 共享数据
 3.2 使用互斥锁
  使用RAII对mutex进行包装
  #include <list>
  #include <mutex>
  #include <algorithm>

  std::list<int> some_list;    // 1
  std::mutex some_mutex;    // 2

  void add_to_list(int new_value)
  {
    std::lock_guard<std::mutex> guard(some_mutex);    // 3
    some_list.push_back(new_value);
  }

  bool list_contains(int value_to_find)
  {
    std::lock_guard<std::mutex> guard(some_mutex);    // 4
    return std::find(some_list.begin(),some_list.end(),value_to_find) != some_list.end();
  }
C++17中添加了一个新特性，称为模板类参数推导，类似std::lock_guard这样简单的模板类型，其模板参数列表可以省略。
  std::lock_guard guard(some_mutex);

- 如果传递保护数据的引用和指针，互斥量将不起作用。
  class some_data
  {
    int a;
    std::string b;
  public:
    void do_something();
  };

  class data_wrapper
  {
  private:
    some_data data;
    std::mutex m;
  public:
    template<typename Function>
    void process_data(Function func)
    {
      std::lock_guard<std::mutex> l(m);
      func(data);    // 1 传递“保护”数据给用户函数
    }
  };

  some_data* unprotected;

  void malicious_function(some_data& protected_data)
  {
    unprotected=&protected_data;
  }

  data_wrapper x;
  void foo()
  {
    x.process_data(malicious_function);    // 2 传递一个恶意函数
    unprotected->do_something();    // 3 在无保护的情况下访问保护数据，因为可以将数据的指针和引用传递在锁机制的范围外。
  }
3.2.5 避免死锁
 - 避免嵌套锁：一个线程只持有一个锁，当获取多个锁，使用std::lock来做这件事(对获取锁的操作上锁)，避免产生死锁。
     // 锁定两个互斥而不死锁
      std::lock(from.m, to.m);
 - 避免在持有锁时调用外部代码
 - 使用固定顺序获取锁
 - 使用层次锁结构
 - adpot_lock 表明当前线程已经获得锁了
  mtx.lock();
  std::lock_guard<std::mutex> l(mtx, std::adopt_lock);
 - defer_lock 表明还没有上锁。
 
  std::lock_guard<std::mutex> l(mtx, std::defer_lock);
  mtx.lock();
  
  - std::unique_lock——灵活的锁
     类unique_lock是通用互斥包装器，允许延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用。
     
  - 使用std::shared_lock<>来保护共享和只读权限
       dns_entry find_entry(std::string const& domain) const
      {
        std::shared_lock<std::shared_mutex> lk(entry_mutex);  // 1
        std::map<std::string,dns_entry>::const_iterator const it=
           entries.find(domain);
        return (it==entries.end())?dns_entry():it->second;
      }
   - update_or_add_entry()使用std::lock_guard<>实例，当表格需要更新时②，为其提供独占访问权限
       void update_or_add_entry(std::string const& domain,
                           dns_entry const& dns_details)
      {
        std::lock_guard<std::shared_mutex> lk(entry_mutex);  // 2
        entries[domain]=dns_details;
      }
      
 - 3.3.3 嵌套锁
  - 线程对已经获取的std::mutex(已经上锁)再次上锁是错误的，尝试这样做会导致未定义行为

- 同步操作
  - 条件变量，解决循环加锁带来的开销过大的问题。
  std::mutex mut;
  std::queue<data_chunk> data_queue;  // 1
  std::condition_variable data_cond;

  void data_preparation_thread()
  {
    while(more_data_to_prepare())
    {
      data_chunk const data=prepare_data();
      std::lock_guard<std::mutex> lk(mut);
      data_queue.push(data);  // 2
      data_cond.notify_one();  // 3
    }
  }

  void data_processing_thread()
  {
    while(true)
    {
      std::unique_lock<std::mutex> lk(mut);  // 4
      data_cond.wait(
           lk,[]{return !data_queue.empty();});  // 5
      data_chunk data=data_queue.front();
      data_queue.pop();
      lk.unlock();  // 6
      process(data);
      if(is_last_chunk(data))
        break;
    }
  }
4.1.2 构建线程安全队列
  - 标准库队列存在接口竞争
#include <queue>
#include <memory>
#include <mutex>
#include <condition_variable>

template<typename T>
class threadsafe_queue
{
private:
  mutable std::mutex mut;  // 1 互斥量必须是可变的 
  std::queue<T> data_queue;
  std::condition_variable data_cond;
public:
  threadsafe_queue()
  {}
  threadsafe_queue(threadsafe_queue const& other)
  {
    std::lock_guard<std::mutex> lk(other.mut);
    data_queue=other.data_queue;
  }

  void push(T new_value)
  {
    std::lock_guard<std::mutex> lk(mut);
    data_queue.push(new_value);
    data_cond.notify_one();
  }

  void wait_and_pop(T& value)
  {
    std::unique_lock<std::mutex> lk(mut);
    data_cond.wait(lk,[this]{return !data_queue.empty();});
    value=data_queue.front();
    data_queue.pop();
  }

  std::shared_ptr<T> wait_and_pop()
  {
    std::unique_lock<std::mutex> lk(mut);
    data_cond.wait(lk,[this]{return !data_queue.empty();});
    std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));
    data_queue.pop();
    return res;
  }

  bool try_pop(T& value)
  {
    std::lock_guard<std::mutex> lk(mut);
    if(data_queue.empty())
      return false;
    value=data_queue.front();
    data_queue.pop();
    return true;
  }

  std::shared_ptr<T> try_pop()
  {
    std::lock_guard<std::mutex> lk(mut);
    if(data_queue.empty())
      return std::shared_ptr<T>();
    std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));
    data_queue.pop();
    return res;
  }

  bool empty() const
  {
    std::lock_guard<std::mutex> lk(mut);
    return data_queue.empty();
  }
};
- future 
 
 
 
     
